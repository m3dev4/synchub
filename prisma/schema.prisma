generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                              String    @id() @default(cuid())
  firstName                       String
  lastName                        String
  username                        String    @unique
  email                           String    @unique
  password                        String
  avatarPicture                   String?
  coverPicture                    String?
  description                     String?
  dateBirth                       DateTime
  title                           String?
  titleProfession                 String?
  linkWebsite                     String?
  isVerify                        Boolean   @default(false)
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken              String?
  resetPasswordTokenExpiresAt     DateTime?
  onboarding                      Boolean   @default(false)
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt

  role userRole @default(USER)

  //  Attributes
  nationalityId String?

  //  Relations
  nationality Nationality? @relation(fields: [nationalityId], references: [id])
  experiences Experience[]
  educations  Education[]
  degrees     Degree[]
  session     Session[]
  userSkills  UserSkill[]
  accounts    Account[]

  // Relations pour les follows
  followers Follow[] @relation("UserFollowing")
  following Follow[] @relation("UserFollowers")
  
  // Relations pour les notifications
  notifications Notification[]
}

model Nationality {
  id        String   @id() @default(cuid())
  name      String
  flag      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Experience {
  id        String    @id() @default(cuid())
  title     String
  company   String
  startDate DateTime?
  endDate   DateTime?
  current   Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Education {
  id        String   @id() @default(cuid())
  title     String
  school    String
  startDate DateTime?
  endDate   DateTime?
  current   Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        String   @id() @default(cuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sousSkill sousSkill[]
  userSkills UserSkill[]
}

model Follow {
  id          String   @id() @default(cuid())
  followerId  String   // Celui qui suit
  followingId String   // Celui qui est suivi
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
}

model Notification {
  id        String           @id() @default(cuid())
  userId    String           // Utilisateur qui reçoit la notification
  type      NotificationType
  title     String
  message   String
  data      Json?            // Données supplémentaires (ex: userId de celui qui suit)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  FOLLOW
  UNFOLLOW
  FOLLOW_REQUEST
  LIKE
  COMMENT
  MESSAGE
}

model sousSkill {
  id        String   @id() @default(cuid())
  title     String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Technology Technology[]
}

model Technology {
  id        String   @id() @default(cuid())
  title     String
  sousSkillTech sousSkill @relation(fields: [sousSkillTechId], references: [id])
  sousSkillTechId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSkill {
  id        String   @id() @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  level     SkillLevel @default(BEGINNER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, skillId])
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model Degree {
  id             String   @id() @default(cuid())
  title          String
  identify       String
  dateDelivrance DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//enum
enum userRole {
  USER
  ADMIN
}

model Session {
  id             String   @id() @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  ipAddress      String
  useAgent       String
  token          String
  lastActivityAt DateTime
  isOnline       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime
}

// Better Auth required tables
model Account {
  id                String  @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  accessToken       String?
  refreshToken      String?
  idToken           String?
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
}
