generator client {
  provider = "prisma-client-js"
  output   = "../lib/prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                              String    @id() @default(cuid())
  firstName                       String
  lastName                        String
  username                        String    @unique
  email                           String    @unique
  password                        String
  avatarPicture                   String?
  description                     String?
  dateBirth                       DateTime
  title                           String?
  titleProfession                 String?
  linkWebsite                     String?
  isVerify                        Boolean   @default(false)
  emailVerificationToken          String?
  emailVerificationTokenExpiresAt DateTime?
  resetPasswordToken              String?
  resetPasswordTokenExpiresAt     DateTime?
  onboarding                      Boolean   @default(false)
  createdAt                       DateTime  @default(now())
  updatedAt                       DateTime  @updatedAt

  role userRole @default(USER)

  //  Attributes
  nationalityId String?

  //  Relations
  nationality Nationality? @relation(fields: [nationalityId], references: [id])
  experiences Experience[]
  educations  Education[]
  degrees     Degree[]
  session     Session[]
}

model Nationality {
  id        String   @id() @default(cuid())
  name      String
  flag      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User[]
}

model Experience {
  id        String   @id() @default(cuid())
  title     String
  company   String
  startDate DateTime
  endDate   DateTime
  current   Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education {
  id        String   @id() @default(cuid())
  title     String
  school    String
  startDate DateTime
  endDate   DateTime
  current   Boolean
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        String      @id() @default(cuid())
  title     String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  sousSkill sousSkill[]
}

model sousSkill {
  id        String   @id() @default(cuid())
  title     String
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Technology Technology[]
}

model Technology {
  id              String    @id() @default(cuid())
  title           String
  sousSkillTech   sousSkill @relation(fields: [sousSkillTechId], references: [id])
  sousSkillTechId String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Degree {
  id             String   @id() @default(cuid())
  title          String
  identify       String
  dateDelivrance DateTime
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//enum
enum userRole {
  USER
  ADMIN
}

model Session {
  id             String   @id() @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  ipAddress      String
  useAgent       String
  token          String
  lastActivityAt DateTime
  isOnline       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  expiresAt      DateTime
}
