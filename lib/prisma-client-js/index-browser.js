/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip,
} = require("./runtime/index-browser.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49",
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
  id: "id",
  firstName: "firstName",
  lastName: "lastName",
  username: "username",
  email: "email",
  password: "password",
  avatarPicture: "avatarPicture",
  coverPicture: "coverPicture",
  description: "description",
  dateBirth: "dateBirth",
  title: "title",
  titleProfession: "titleProfession",
  linkWebsite: "linkWebsite",
  isVerify: "isVerify",
  emailVerificationToken: "emailVerificationToken",
  emailVerificationTokenExpiresAt: "emailVerificationTokenExpiresAt",
  resetPasswordToken: "resetPasswordToken",
  resetPasswordTokenExpiresAt: "resetPasswordTokenExpiresAt",
  onboarding: "onboarding",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  role: "role",
  nationalityId: "nationalityId",
  followersId: "followersId",
  followingId: "followingId",
};

exports.Prisma.NationalityScalarFieldEnum = {
  id: "id",
  name: "name",
  flag: "flag",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ExperienceScalarFieldEnum = {
  id: "id",
  title: "title",
  company: "company",
  startDate: "startDate",
  endDate: "endDate",
  current: "current",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.EducationScalarFieldEnum = {
  id: "id",
  title: "title",
  school: "school",
  startDate: "startDate",
  endDate: "endDate",
  current: "current",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SkillScalarFieldEnum = {
  id: "id",
  title: "title",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.FollowersScalarFieldEnum = {
  id: "id",
  count: "count",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.FollowingScalarFieldEnum = {
  id: "id",
  count: "count",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SousSkillScalarFieldEnum = {
  id: "id",
  title: "title",
  skillId: "skillId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.TechnologyScalarFieldEnum = {
  id: "id",
  title: "title",
  sousSkillTechId: "sousSkillTechId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: "id",
  userId: "userId",
  skillId: "skillId",
  level: "level",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.DegreeScalarFieldEnum = {
  id: "id",
  title: "title",
  identify: "identify",
  dateDelivrance: "dateDelivrance",
  userId: "userId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SessionScalarFieldEnum = {
  id: "id",
  userId: "userId",
  ipAddress: "ipAddress",
  useAgent: "useAgent",
  token: "token",
  lastActivityAt: "lastActivityAt",
  isOnline: "isOnline",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
  expiresAt: "expiresAt",
};

exports.Prisma.AccountScalarFieldEnum = {
  id: "id",
  accountId: "accountId",
  providerId: "providerId",
  userId: "userId",
  accessToken: "accessToken",
  refreshToken: "refreshToken",
  idToken: "idToken",
  accessTokenExpiresAt: "accessTokenExpiresAt",
  refreshTokenExpiresAt: "refreshTokenExpiresAt",
  scope: "scope",
  password: "password",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: "id",
  identifier: "identifier",
  value: "value",
  expiresAt: "expiresAt",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};
exports.userRole = exports.$Enums.userRole = {
  USER: "USER",
  ADMIN: "ADMIN",
};

exports.SkillLevel = exports.$Enums.SkillLevel = {
  BEGINNER: "BEGINNER",
  INTERMEDIATE: "INTERMEDIATE",
  ADVANCED: "ADVANCED",
  EXPERT: "EXPERT",
};

exports.Prisma.ModelName = {
  User: "User",
  Nationality: "Nationality",
  Experience: "Experience",
  Education: "Education",
  Skill: "Skill",
  Followers: "Followers",
  following: "following",
  sousSkill: "sousSkill",
  Technology: "Technology",
  UserSkill: "UserSkill",
  Degree: "Degree",
  Session: "Session",
  Account: "Account",
  Verification: "Verification",
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            "PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `" +
            runtime.prettyName +
            "`).";
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
